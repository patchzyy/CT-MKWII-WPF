<UserControl x:Class="CT_MKWII_WPF.Views.Components.InputField"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:components="clr-namespace:CT_MKWII_WPF.Views.Components"
             mc:Ignorable="d"
             d:DesignHeight="90" d:DesignWidth="300"
             x:Name="Root">
    
    <UserControl.Resources>
        <Style x:Key="InputField" TargetType="TextBox">
            <Setter Property="Background" Value="{StaticResource InputFieldBackground-Default}"/>
            <Setter Property="Foreground" Value="{StaticResource InputFieldForeground-Default}"/>
            <Setter Property="BorderBrush" Value="{StaticResource InputFieldBorder-Default}"/>
            <Setter Property="BorderThickness" Value="3"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="FontSize" Value="{Binding FontSize, ElementName=Root}"/>
            
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <StackPanel>
                            <!-- Label TextBlock -->
                            <components:FormFieldLabel x:Name="LabelElement"
                                                       Text="{Binding Label, ElementName=Root}" 
                                                       TipText="{Binding LabelTip, ElementName=Root}" 
                                                       VerticalAlignment="Bottom" />
                            
                            <!-- The border is wrapped inside an outerBorder without the border
                            This is to ensure that even if there is a funky pixel gap in between the inner part and outer stroke of the border, 
                            that it will just be filled in with the same background color as the inside -->
                            <Border Background="{TemplateBinding Background}"
                                    CornerRadius="{StaticResource GlobalCornerRadius}">
                                <Border x:Name="border"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{StaticResource GlobalCornerRadius}">
                                    <Grid>
                                        <TextBlock x:Name="PlaceholderBlock"
                                                   Text="{Binding Placeholder, ElementName=Root}"
                                                   Foreground="{StaticResource InputFieldPlaceholder-Default}"
                                                   Visibility="Collapsed"
                                                   VerticalAlignment="Center"
                                                   Margin="{TemplateBinding Padding}"/>
                                        <ScrollViewer x:Name="PART_ContentHost"
                                                      Focusable="False"
                                                      VerticalAlignment="Center"
                                                      HorizontalScrollBarVisibility="Hidden"
                                                      VerticalScrollBarVisibility="Hidden"/>
                                    </Grid>
                                </Border>
                            </Border>
                        
                            </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource InputFieldBackground-Disabled}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource InputFieldBorder-Disabled}"/>
                                <Setter Property="Foreground" Value="{StaticResource InputFieldForeground-Disabled}"/>
                                <Setter Property="Foreground" TargetName="PlaceholderBlock" Value="{StaticResource InputFieldPlaceholder-Disabled}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="IBeam"/>
                                <Setter Property="Background" TargetName="border" Value="{StaticResource InputFieldBackground-Hover}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource InputFieldBorder-Hover}"/>
                                <Setter Property="Foreground" Value="{StaticResource InputFieldForeground-Hover}"/>
                                <Setter Property="Foreground" TargetName="PlaceholderBlock" Value="{StaticResource InputFieldPlaceholder-Hover}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource InputFieldBackground-Selected}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource InputFieldBorder-Selected}"/>
                                <Setter Property="Foreground" Value="{StaticResource InputFieldForeground-Selected}"/>
                                <Setter Property="Foreground" TargetName="PlaceholderBlock" Value="{StaticResource InputFieldPlaceholder-Selected}"/>
                            </Trigger>
                            <Trigger Property="Text" Value="">
                                <Setter Property="Visibility" TargetName="PlaceholderBlock" Value="Visible"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding Label, ElementName=Root}" Value="">
                                <Setter Property="Visibility" TargetName="LabelElement" Value="Collapsed"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <TextBox Style="{StaticResource InputField}"
             Text="{Binding Text, ElementName=Root}"/>

</UserControl>
